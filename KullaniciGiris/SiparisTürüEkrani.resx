<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.BackgroundImage" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAASwAAACoCAMAAABt9SM9AAAABGdBTUEAALGPC/xhBQAAAJBQTFRFySwv
        ////ySotyCYpyCUoxhgcyCMm6rK0xx0hxyAkxxsfxg8U78PE++3u5J+g/ff38MrL9dXWyjAz01ha56qq
        34iK1GBi3X6AxgkQ0E9R2GxuxAAA1mZo4ZCRz0lL0VRWzDc6zT5B/PLy45ma2nR2zDs99+Pj7Lm64YyO
        3oKE9t3ezkRG8MbH12ts45qb23N1Aj2uNgAAF+xJREFUeF7tnQubqjgPgCGFSsErCBWGm4KKMo7//99t
        W4qCF0Zn1D171vf5vrMj3iCkaZKmUXnz5s2bN2/evHnz5s2bN2/evHnz5s2blwAAiMH+Iw+8uQgANizT
        Lh3Pc+IlsUyM3hK7DBBcBtl4MFgsRqPRYjDYTvNEMd/iOkfTLXc8UE8YTYbpjLzl1QSQFa6lfM6YUPwW
        1xEwnP5IiuYS2xwj+dL/PWTW6xIV57PU38rFAD0/M1UXGFpv5WJz4FSK4xvGJZZv+d+C0FXDfsrKN+Sb
        /qdo860UxS2E/2tpIXsl5XATo/3/WFqgTKQYbmThEPnWn1GHnfLhfwnAYymEmxktfzwnMkER2w+DfeDM
        Mf7PCcy6cR5sMrF/eJU4TYKs8HxGQrONU74oKhBJlN+nULAnBXAXU0u+/R4AmdSlMcH8tAEwUXKa2fjZ
        4gLQcOp7nueUCv9qefgHwPIu434guN/dAhR+lURrnCwgbEZ0/lQ/F/DSzzd5EHrebk83YWz//OvMHwxC
        zvbuwAfmm5BNJieAFrvO80wXYIXSILY1PqUgDaVJvgmNH4oL+Qt59feyudN/wH4xv5hEBJRT40nSQsvc
        ncuhB8jgpgsjrwib6n07Vl9e+90M5nd9IQ7pVeNEnOIpdh4gcX15gwBrzjQTLg+yd5v0B98Hc3npPyC6
        R7XAoc2xxu27/JODfPd8gP4eI6e1qIgZMLXozcRD0Moovt/m/tRicVaW3rLWXaD4qDuI6DNiK+ZMP6oa
        9ujv/NwLAHE9+aXgR+PtZxR41JEH0Ma7V1pQ3pKWucZ46oZ244qvA2lRaxLS/ag/GDHHdrXezA+zBAnC
        B8+JABtHfiRT680mmo5XIzWS9wSUTXLDiTchVF73TxmtevsbHCVM/eo1QBKeYVxsx+MVm1kGX3XCB5Ti
        wQOR5KH4bEO3zDhwh71ebzrtObV/CCQq7/tC6+5A5wIT+p12MadBykSPFupq6Cm6ZRnpnsltVftrMHfv
        HRedIG9fWfOvzz5jLekPTfG0uD13hSGw/Knf0GYVdk5mAJF8nhTqwJ19aB6NIuroH+ZQHczEMw3tewjs
        O4UozgLfySH0QAm95/bgXH7CbxlNu24S+PVZQTJNrPKrSp6NJq5thgdTBXH+QNXCbjXIOoTFXnOPA2F8
        yU/4PWNDkx96Ds7j+qTAJB6bU/rDgtlbduZpY72IRI+zWhDL2bVLWMxs3TSpsBhcw3j2KT/hAayuOi4A
        xdEtgPlAHSofH7PZx0fZV/cNEUOyf9iEiPN6RukQ1m0jH4i29MM8D3/jOJyyvTa5IM87CgEUujOArifj
        3o6A19SlB47D4/3hwlqoi8Vgwf4djUYtYYHfvFkXQTqiaz5xP5hJ5R6foeVNjwYwKeXNnkIrVgS4y+B2
        gXLpfHJhjeMozJPpLvOGw+l62xCWYmTdJS9g+tPv1lJ/yLQ9JyJiiFNBQVvnSKSuEwPtJv2TWYFUodsD
        0Pa1leTCCn2aB33qzKfRsC0s5NVCvQiC7JFjr82uqRkkKTKHSwvTtlBgvseKVxr26VyEq9n+AeCDh8uE
        NZlmWRRMo4m3DcJBcxgyM0k7xiFOf5xluIFJozCJ7HlIk+lcBiciAIz76sA582S1/E6f+ipHHe008NxM
        XhcWcZ6nVpzjtIf8aqznBIzs1BRpO/ZMr3alD6DwUW4p1BFDS1jijNrCSq8LC8WPN+stVoczwTLq7JV+
        +XXqEYj43T0zUGj3IGFBuau/shLWmKGuPO4Mt4SloKtzCqT3rDv/iLg+SbKpDvS90Ps6czZJuL5gnzB9
        0DAE/+CsVMJyo4yOnGGP/dkWFr4WkILxQB/0Cut6bB2GoYmMfdOSg6kzrI8Z/4+uNQvkSHaqgj/kTFg0
        yjbjbHxBWIfxeoLhitN/KttaLoDEt001YK7DIdphx+fD6ZFeSKPl4UlcJ5t+C8yDtrCCcE+/Pvvnwmq5
        do3kLcyea9wr6nwb06Bw2tvzTKpGG04pSI2TRFt1fJCv/TAP/ji6KmFlvf5XNj4XFiz3hzkZiAFmffZG
        JE7vyTSyw5ppijOBODhOOTBvLVMGhnlYgTwmJ34NOUzAlbBGgaNO+5/nwvI3c1sTuXGAzXi7dqr3gX1n
        9cfPyC6sYjSDe9D4yR9I4UNlLqoAhZ3u9D3gTT19VMJS11N1UpzbLPCjnNI8RljThS4tqvchhz94Oj3m
        hZ7SkoKRyVdyBh9GrNbG2Ii+i2pvRquTDrWw+lOm9MmZsLR9STTbDzbuXoqnL262OawePZlxy35WQLk5
        Dk6wGr6e6wWrTxnLorCRnPglx0RHQ1ijc9cBR0yrecmIPQ/5y9jTwso/JN3+PZeExUZFw4Ei9CCtNV0M
        JvVaLXGP8+Kv0epFzYaw1DMDj7w6TwsA/GXs/LmZBfMVc6Gqfl4SFqCoToWwu6iH1X0bRBokCcjTxWFj
        Gvg1BzXtFBZp3ES5NC9WE2H+5EhHcslm8XOXUx7Eoec5PPGYB07iMWohzos7ayc6gbkc+UcDL/9pCIu9
        qDFNL9eL0aAQTjX8uADkPq6s6SPqizsNyedgxOG7qNTRYutKBVDkAsOjwPvK45PCWnFXYHsSG6LDyi8H
        cOwtpYRfJKwrfiWkUXViCJKoN96uBqvtZD3MU6lwJnUeOAg5ZiSMoRTWkaOw8K498JmhP6j5S2zWKJEm
        6BRmtqqaNUCGblm6YeqWXjmt/DTp3ZUH38FcXH57rgsLSrcWzimAXiKs67WmzCg11n9aRTQszvlBHeF3
        4F3OTMKZsOq0Mphf12df6+npGc55Ru8ApIeilhaAIZNRxmMhOQ9NkSuDdokM1iHNOnLYOp8Knk5XgRuY
        +41PmirFYJ5DXmhXxu4vYdJiMwc2WlS3RSuLrgkFB/J6nknTibmAVlLqK8fcOyBcesXzKkqJF1VR8glA
        nKizkv93pVg38l1FGpuec5fONSyqYbHtRXn4zN3qSIn27cVJBuByk3+z5/s3RX43Mv6+ghk0PM8zGjDy
        yE2Y2OQTzwEUL3LmjY0coKF4v4m/81MglZf0NEbeTb4Sk5eSzudLGx0H5NNg4VVAowSwqO3WSLov8qSz
        QKrC4qHRM7k9K8zrb59mqU5BGniRu6+UeVPiS1bsDFCe6z30r9Q6/PuwiQTSeVneo8wkbOW/H0zljyLj
        p9sXnszdyvzretsOJikXkp5Mp8l1x/Q/hSWXPh9PNQZNkTO+lHkQ1XOEYLEhTB77Q6nPDwh9ire1qJJ7
        YFQPz3biIFQ6Xl5kWURDx3/+prlfgCxsSg8IjPgJizyTpPLx6kWRxqIqg7kKTpTnScpkBnYZ5hu34cX/
        YeBkoo7WtW+BZvmDxfXp1Y0xwK6OtAYaQnkREhZ2iKNiOKYF9f9McclykF59dkDsvP+owbjYDh18dEWr
        RPa46UNoTpGcbodkAQfddwT9/x5yChwco2zAur2P+P6MXzEdRjQ2zWboBelwMBg2NsuBSalyIfgD4hXz
        B+dGHwEphLBGrdonwERUs/wK0zjbPQ+mNTOJQ2WREaTFtdgC2e5Tsli/AyXCFR3L838FWlKVkULq+lfV
        B+D+XWxPB8c8Jhwlr1R6VLrcR9Wj67Ji0kKbaxn7FyAceoZ8WIE9qtsRJa81EEynYqTRLlmxFykP3IBy
        F4BhHieOk8TLZrSIuLUF8vKJmkmrdOhpEvkEWLZW7l4E8/tK1w1ymrP/BcWm7p4ARpDfkLxhADFuSl1I
        2Mu/kT9gN0NKasuH7AAiLNxpvAksDeeH4rdXAXiZu7lN+N4ljDWEU+rmKbt2UPLwthyTlrpZcHu/ADaV
        feXfCBfnCU4yV3rzYGoOLdy9bdZvQ+U2x8arByLY+00C1TlgccGAbafwbGTnN87OyGeO62h6sU7hApDy
        8r11d/KcRIC8oVuVZpEyW4lJebAOq3vCi+tcgpzH7QS7BRwXXu3vGHRdrRwyMxUWS9e/cW7WqxKSqh7h
        e4wq59qoujpHCxykBT2XL5GDlTeKI6di5Qvv+QdA2vkhD4ZZJfeQ9EeJLDDiaMowuLUwZVZlBae3ZaLq
        evrLFTMSVBiK8TVZu5gpusjcTNbT3if/oi1fyOf3hwkKP7Iq6xsA8t1xQoHlVp0e7hQQurvRYZCFzDe2
        taibkx32Zl8AYooVi73uy1BMXq65pdl4MulRUSNlgmIxXWPCAvtaJfrjMfLgMNsB0Wd28GHV5RZcWsFt
        Si5rKG+dx6vtE6OumQx8Zoy4QKamCCHWdSKtx4af+mWCwR7zIfiwnQLfgoNaGqDpcdGbrAarz2F+aBtt
        bG5cndKZ/R3fHqtZxXaw7exlJzYZMjFtLeAFmutj2e0254EqIlJYWnBfT5sfA6UrlYFF8f3RaCDN6Opr
        WV03kBtrxICUFN3h5JO0dDsNHJsL2RfPBlNdJLn4frqaKbNWX6YchgraP2orWDcsXJBOC5r11EXkOIdF
        51VgiWegvLH6EMr7aoXB2HQO2mrHnz4ZGjzrsW52QV2wQbzSuT0TmtXaFPw8tLp/Cy63auG0tzH1Kmlh
        77CbrBNw7jxnFLaTxycQvuIKyN1hPu21V5WilbpY6sxMcmHhupfOcwFb7lCB+XbknG18HgqtA7u4yRJ9
        c+3noG6NqCrMy9HYImN11G62MR2rC584LxUWkjWmymysepVX2YIXvrGTOWw26ETL77SzEHeOW6FZyB9N
        LHxRWAlCkdif+SJhEbdKYxNXzS5VyCwq265ntxhuLD/sdkinypIvLiyHzYYXhuGWt3WDjz53A19js+pR
        yPdZXV5/qGK927Zp39hppAGmXZ1chPCRN1rNeA+XaWtBiRt4AoDXIRNWazfi08C0GjjkavedkbDx2qEh
        RBeE25i7AL8u+L8E8pjCaOFoMEMxU3Luidbw3Q4sUoJYXbO7ifMumT8KLIOTjk05wiOF5bc9RBh3CwuQ
        nxN0taus6JjAhLWYKTOmVtOjnRjs2FTErC3yxN4V42GdLzoAu9plL+KGK1SBsZiYOuBdocFwW2ta3wFI
        mTuuF4b8l3nOChEZMGexIQ7U0YzpDjuVrN6UNuE/aLBmMzXe8RJU8A87dJ8IlJWwCKx557FLfGZitfO4
        rfMc3rZz6e3phk73zHnQbhIYe9N87+ZMUowwpG54YTmeb3jmaZgPBUwePPf269ViMHFdJqsF10Ymw+2M
        28pbvvKXMD3nMsB0OrzOlLsN1yc6ph8OpdRbIoyNNMkpDe3vzx3AozQmvO6Qb9VDmuZszpfjoaSY69QH
        +xOL9aV15BZDHpCtRJqNReMri7+qev1TkcKSabtr8C21mF5JGYHibULRm1k84ksejht+070cIN6E87Zo
        AMV5ftohmbgpXwznXeoAN13mcSLkw1va6Th4jf9eCcvsLQbXWXFP5pqwcFmEttayz0xRPPe8SUwDwMFm
        WafRjwBJ3JMsBApDXQqLjcSwvqmrSKvmGyNiwkqvNaF4LPVedXN25KPi8GAmylvwxUUBwDm9ZJmRue9w
        oABcr7GugQy5w549g+i+PTEabqlk9SjTrDT/mg5dX6/fDsowtOr1jCdTG/gDSCn9hCOKvMEI1jIHebEt
        Fdgb70raQPPda6EPpMWhgQoD+1FvKHo3MIDs87aali4hR8UBvi+ENG4PGIb3ouUKUNpb+7T5ZDVYcAbM
        MQbdZVai6mp5KS4B1FGWgdLicot2QEVzTcPYD3jnIN4VRECCKhyt0b7pAYzKG/PYv6etMKix22Sskzk3
        EX0R7oB/3ogXSNS1yYBFUhd1yyia74KluvJm6fSYiyc5D2COMOl12D8UP6X79EWOrdoYUG824aoV6A6f
        oXuVx3Ap3AHavRLMRtCFq2Qmu/kuo6cy+wXWZHCwcWTTtkEouL4Ui8pXLuxohx0NxDSkgzyaZLn/seET
        dSYvF58nX1Dy3Y4kzTn3f072fIO9nXBJGMVxry97SeuDAYWbent9GyDOfd16f0ntEjD7tC4rWVXwAbmg
        Vaa0KdOaWxKCxnkLz+bGfgbECzHOcciXuySadxK9YJ+7IqcfBSil+e3VAg8A7UT6DSBiRrYq7zuw2tUS
        utDBS6SQUNc4BA2W7olRg6Q9o0A5GVqEEDPZHtWJ3YeTW4PSPI/bPgpoy5D5DK+UFbs9Iq4C4MHEXtis
        2k9exfUps4s+VSzFjJCiBR09J8B30Zlv3Wj6K2BuBItfisItokbOVDtzycUeQ0fBLO5kIIS1Mr/qtjwP
        ea9hxpM0+7XajxU7Xc7nZXncxUeazasqMGVXra8vNkKpMIYL8yxqO3XXeK2ApLnsb54vmoLG3H6ahw5z
        Ar2ABaPzprv1Ipg7LWw3X7VXt840ZcZBUr2AXZFz1mgBFB5ikGhR9xY/R19PrNN8QKvpL+eKsC4nZhFa
        xr4Thp4fl8rVCfKpgFK1GcTJqOcND23FjgDJzkKXKk7SQlXOABewtsx1AqclnUOiB4iu8xGsHX8Jimc8
        mUOu8zO4lpjlt7DKFf4romKgZCNuP/Eib70+M0JgX+jZCAn3lpDfsVN+JjY7m81xB4oclch2++vQBO4y
        1KyYkmrLYX/qE2b3X5HN+xGaV0nL3GwnZzEp2PRCOXDlcUA5qDqi8VvdQBzSVe6JH9ubMepQFJbj0Xir
        UgxWY1FXAyi3i/FqtNMU7TWJhJ+geS4LodmUE539VirSiipz1KYy1KBshaURY+OIkBazRtzJQruG9ZEZ
        IcUcjsIZ6qk+brZNKszZeJHM0vEqZSP/bPr9Y2BeH89Swml4AtiJxH7JU2RKXu+PubBOW0xyZSIFu2Ym
        rGbJhliAYMwGU0uBj8H4o1m+MCgd/uOjmq3uNHLTOuW/BFrSYHk6FQNa5lfWmOQwMYeiYxuJePo5Y1oi
        8tBDHtqaPRHHtJY/mZvCZQCVOcOh2+6KN8lF7vpDdQk57Tv9R8HCrM2+8cN9bGThNN/4V2ZoVKW5MB2k
        vBeFblmm+TFR1Q/TZH9rCGn6+JNPb5eEhX3RzxDis73pIttibfuzP1qzGID9DQ3jFDQGpP6ObuKr5e+y
        4SmkKuWrMwwAfcpnNOxUj8OViJiPLRkZlc3C2njLNQg5jZx6hbCARqY6sz/YZlUAmvs585L3+5xuAv9k
        QaGFKNlg1+upokXaaKQODSNS+3rjyJQLCwVNYfHO6SicVC1YkXPWuqyaLtLJqDgL3P88+G9ponTJWxcc
        BuRFRMkGv155laqaEUzZxbaO8Fc0f05BdE7H7jgQzjrTrMHGbdCTXjyaTz9PwqQ/ltpT6qKOR6yvgWHb
        9nzgWvzimc0h8SBXbFvrTT74C3BrY43wCLBeCYK9flI0lpXGbh3ygPW4PrZ/AJBUtYDmcDBjc4E9cJnb
        HS/Ev4OAcANWdXZqN9HWmkkHbrOaZUSftWadWLr/PIc1tOHgY2bN9Jawwg/L+hgKYaF2bNhKInKbFTQ8
        NLo6COvlu3GeC9/7wDCH6orD6+9qYS0G/MhIZG/ISU9pvDmmzLmwtkfVGmeHzMNjf/Hr30fbC6vCApci
        iqJs5JpELxeuZTCb1WNHignXrLN8FtodlyvEbLiuI+kxr76Swjr2uv1LMITbyIehYZho4cZZNlT7URbG
        g51uGDNhs3Al0gb4KIfKz/r0+A87TmjBH1TCemBP9z8EplpMR4jL1xvA/gx22+12Mtluo2WfmykS9Uym
        WG57FApB1FYL0srPWm9yKn/0qBISfumSzSuocoagiOsCW1Hq7ab8b/40e8I4WQHkoOJwzIhOXPiJWKvB
        9CSd+heAEsrURnpR7F+RyWLIeYz9gb0LdhpIVMfmQLyvryz7YrB/s69qbRmVslXyXwWh1Y+7XgPFhVj6
        P4GNTSlPNpartp8SEYmikv/a1d+H4XY1oID5QYXaaE5HeQKKr7zrvw4g12v65y0QDK9VIWh+lF7OwABh
        T/2VsuLX5gaXE15gOFm9X/EcZEd8teIUQEA333cp/a8CJNicpe0ZyKZ51/QPdlicJcsQ+NGjG7r/WeB4
        Q09aiYBmepHXkQxj8OZX2Vx0DxMPQdP0MMqf1Ez6jwEMP6IJk5cEGWVe7L5vnQmY0GifJwrvuZF6NM8c
        2aHkrwaQH0TUTxKf/3/3lTt8Xe0GMMROSFls6eZe0iit+LsBRJZhTjm7mOnHrQrCFZErliiOkcf+D4jf
        3xZXLQ+8efPmzZs3b968efPmzZs3b968efPmzb+BovwDFoWolxVH36kAAAAASUVORK5CYII=
</value>
  </data>
</root>